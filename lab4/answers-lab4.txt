Q1: Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were omitted in kern/mpentry.S?
A1: kern/mpentry.S was compiled and linked to run above KERNBASE, but APs start in real mode, which means it can only address below 1MB. So in order to execute mpentry code, we need to move it to MPENTRY_PADDR(0x7000). The purpose of macro MPBOOTPHYS is to translate the address generated by linker (link address) to the actual physical address (load address). If we omitted it, the address we get is link address which above KERNBASE. And while APs is running under real mode, it can't access these address correctly which will cause things to fail.

Q2: It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.
A2: When a processor switch from user mode into kernel mode (which means privilege-level changed), the processor will saves the current state of the SS, ESP, EFLAGS, CS and EIP registers on the kernel stack, which it is happend before require kernel_lock. Consider this situation, another processor switch from user mode to kernel mode in the same time, it will push the same registers to the shared kernel stack. and then the first processor require kernel_lock. Although at this time the second processor can't continue execute, but it already mess up the first processor's kernel stack, and it can't prevent by lock.

Q3: In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context--the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?
A3: The variable e is stored above KERNBASE, which is a memory area that is same for all enviroment. The virtual memory area above KERNBASE for all the enviroment is mapped to the same physical memory location, they all just basically copy from the kern_pgdir.

Q4: Whenever the kernel switches from one environment to another, it must ensure the old environment's registers are saved so they can be restored properly later. Why? Where does this happen?
A4: When we switch to the new enviroment, the new enviroment may overwirte registers which is used and relied by the old enviroment. If we switch back to the old enviroment with these violated register, it may cause some problem that we didn't expect, So it is necessary to save old enviroment's registers. It saved in 3 steps, first, the processor saved (SS, ESP), EFLAGS, CS, EIP register. Second, _alltraps in trapentry.S saved the rest of register. Third, trap function in trap.c copy the saved register value into enviroment's structure (curenv->env_tf = *tf).
